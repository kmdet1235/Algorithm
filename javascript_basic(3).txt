<<Javascript Basic 개념정리(3)>>


( 스코프, 호이스팅, TDZ )

  * {스코프(scope)}
 
- 스코프(scope)는 식별자(ex. 변수명, 함수명, 클래스명 등)의 유효범위를 뜻하며, 선언된 위치에 따라 유효 범위가 달라진다. 
  전역에 선언된 변수는 전역 스코프를, 지역에 선언된 변수는 지역 스코프를 갖는다.
  전역 변수는 어디에서든지 참조가 가능한 값이다. 반면, 지역 변수는 함수 몸체 내부를 말한다. 따라서 지역 변수는 자신의 지역 스코프와 
  그 하위 지역 스코프에서 유효하다.
  한 가지 주의해야 할 점은, 자바스크립트에서 모든 코드 블록(if, for, while, try/catch 등)이 지역 스코프를 만들며, 이러한 특성을
  블록 레벨 스코프라 한다. 하지만 var 키워드로 선언된 변수는 오로지 함수의 코드 블록만을 지역 스코프로 인정한다. 이를 함수 레벨 스코프라 한다.


  * {호이스팅(hoisting)}

 - 호이스팅은 함수의 코드를 실행하기 전에 함수 선언에 대한 메모리부터 할당하는것을 얘기한다. 그때문에 스크립트내에서 함수 선언의 위치는 중요하지 않다.
   스크립트내에서 함수 호출을 함수 선언보다 먼저 해도 문제가 없다. 또한 호이스팅은 스코프 단위로 일어난다. 


  * {TDZ(Temporal Dead Zone)}

- TDZ는 구문(let, const, class 등)의 호이스팅으로 선언만 되고 초기화 되지 않은 지역을 의미한다.
   호이스팅은 블록 단위로 발생한다. 즉 블록이 생성될때 블록안의 호이스팅으로 선언을 먼저 하게되는데 선언 후 초기화되기 전까지 호이스팅 된 구문을 TDZ에 있다고 말한다.



( 실행 컨텍스트와 콜 스택 ) 


 * {실행 컨텍스트(Execution Context)}

- 실행 컨텍스트는 자바스크립트의 핵심 개념으로, 코드를 실행하기 위해 필요한 환경이다. 더 자세히 말하자면, 실행할 코드에 제공할
  환경 정보들을 모아놓은 객체이다. 
  모든 코드는 특정한 실행 컨텍스트 안에서 실행된다. javascript는 어떤 실행 컨텍스트가 활성화되는 시점에 선언된 변수들을 위로 끌어올리고(hoisting),
  외부 환경 정보를 구성하고, 해당값을 설정하는 등의 동작을 수행하는데, 이로 인해 다른 언어에서는 발생할 수 없는 특이한 현상들이 발생한다.
  실행 컨텍스트엔 두 종류가 있음


- Global Execution Context

디폴트 실행 컨텍스트로, 자바스크립트 파일이 엔진에 의해 처음 로드되었을 때 실행되기 시작하는 환경이다.

- Fuction Execution Context

우리가 execution context를 따로 구성하는 방법은 함수를 실행하는 것 뿐이다. 함수가 호출되고 실행됨에 따라서 해당 함수 안에서 생성되는 컨텍스트.
각각의 함수는 고유의 실행 컨텍스트를 가진다. 그리고 전역 실행 컨텍스트에 언제나 접근할 수 있다.


 * { 콜 스택(call stack) }

- call은 호출을 뜻한다. stack은 출입구가 하나뿐인 깊은 우물 같은 데이터 구조다.
  따라서 '콜 스택'은 자바스크립트가 함수 호출을 기록하기 위해 사용하는 우물 형태의 데이터 구조이다.
  항상 맨 위에 놓인 함수를 우선으로 실행된다. 이런 식으로 자바스크립트 엔진은 가장 위에 쌓여있는 context와 관련 있는 코드들을 실행하는 식으로
  전체 코드의 환경과 순서를 보장한다.


( 스코프 체인, 변수 은닉화 )


 * { 스코프체인(scope chain) }
 : 자바스크립트 엔진은 각각의 scope에 일종의 리스트 형태로 global execution context와 그 위에 쌓인 함수의 스코프의 레퍼런스를 순서대로 저장한다.
 스코프 체인은 식별자 중에서 객체(전역 객체 제외)의 프로퍼티가 아닌 식별자, 즉 변수를 검색하는 메커니즘이다.

 자바스크립트가 변수 값을 얻으려고 할 때(variable resolution, 변수 해석) 스코프 체인에서 변수를 찾는다. 스코프 체인은 위에서 말했다시피 객체의 리스트이므로,
 첫 번째 객체에서 해당 변수를 찾고, 없으면 그 다음 객체에서 해당 변수를 찾고, 여기도 없으면 그 다음 객체에서 찾는 식이다. 리스트의 끝까지 탐색했는데도
 그 변수가 없다면 reference error가 발생하는 것이다.

 최상위 자바스크립트 코드(어떠한 함수에도 속하지 않는 코드)의 스코프 체인에는 하나의 객체만 있고, 그것이 전역 객체이다. 중첩되지 않은 함수의 스코프 체인은
 2개의 객체로 이루어진다. 하나는 함수의 매개변수와 지역 변수를 정의하는 객체고, 다른 하나는 전역 객체다.

 함수가 정의될 때, 함수는 스코프 체인을 저장한다.


 * { 변수 은닉화(variable shadowing) }
 : 스코프 체인 상에 있는 변수라고 무조건 접근 가능한 것이 아니다. 스코프 체인상에서 먼저 a 변수를 찾아 냈으면, 경계 바깥쪽에 있는 같은 이름의 변수 a에는
 접근할 수 없다.
 이를 '변수 은닉화(variable shadowing)'이라고 한다.
